/****************************************************************************

  Спецификация на вспомогательные типы данных


  Comands

  Типы команд доступных в протоколе для общения клиента с сервером

  * Список команд:
    - Finish    - завершить работу сервера (символ 'S' ASCII)
    - GetNumber - запросить у сервера случайное число (символ 'R' ASCII)
    - Echo      - отправить эхо-запрос (символ 'E' ASCII)


  E_Protocol

  * Типы протоколов доступных для общения клиента с сервером:
    - TCP
    - UDP


  E_SocketType

  * Типы сокетов:
    - Клиентский
    - Серверный


  E_Mode

  * Виды режимов работы сокетов:
    - Блокирующий (blocking)
    - Неблокирующий (nonblocking)


  E_FileMode

  * Виды режимов работы менеджера файлов
    - Reading (режим чтения)
    - Writing (режим записи)

*****************************************************************************/

#pragma once

#include <array>
#include <vector>
#include <cstdint>

namespace network {

/*****************************************************************************
  Macro Definitions
*****************************************************************************/

/*****************************************************************************
  Forward Declarations
*****************************************************************************/

/*****************************************************************************
  Types and Classes Definitions
*****************************************************************************/

//// Структура файла пакетов:
////      T_PacketFileHeader
////      T_Packet
////      T_Packet
////      ...
////      T_Packet

//// Данные заголовка файла пакетов
struct T_PacketFileHeader {
  union {
     unsigned long TypeDw;
     unsigned char TypeStr[ 4 ];
  } Type; // Идентификатор формата файла
          // Mes1, Mes2, Uvk1, Uvk2 - старые форматы, цифра - тип протокола (1 - RS, 2 - Ethernet)
          // Unf1, Unf2, Cpu1, Cpu2 - старые форматы, цифра - тип протокола (1 - RS, 2 - Ethernet)
          // Mes3 - новый формат, тип протокола и формат данных пакетов хранится в полях StreamInfo для каждого потока
  unsigned long StreamQuan;
  unsigned long RecordsInFile;
  long          RecordTime;
  char          RecordName[ 64 ];
  long          LastChangeTime;
  char          Info[ 60 ];
};

// Структура пакета
struct T_Packet {
    unsigned long  Time;       // Время получения пакета в миллисекундах
    unsigned short DataSize;   // Размер данных пакета
    unsigned char  StreamNum;  // Номер потока, которому принадлежит пакет
    unsigned char  Info;       // Зарезервировано для будущего использования
    unsigned char  Data[ ];    // Данные пакета
};

/*****************************************************************************
 * Типы команд доступных в протоколе для общения клиента с сервером
 */
enum class Comand  {
    Data,       // Запрос данных
    Finish,     // Остановить работу
    Invalid,    // Невалидная команда
    Quan        // Количество команд
};

/*****************************************************************************
 * Виды заголовков, используемые в протоколе передачи данных формата *.mes
 */
enum class Header : uint16_t {
    Unknown  = 0xFFFF,    // Неизвестный запрос
    EchoReqt = 0xA0BF,    // Эхо запрос
    EchoResp = 0xB1AE,    // Эхо ответ
    DataReqt = 0xC29D,    // Запрос данных
    DataResp = 0xD38C,    // Ответ данных
    FileSent = 0xE47B     // Файл передан
};

// Структура пакета протокола передачи данных по сети
struct T_NetPacket {
    Header Head = Header::Unknown;  // Состояние сеанса
    std::vector<char> Data;         // Данные пакета
};

/*****************************************************************************
 * Типы протоколов доступных для общения клиента с сервером
 */
enum class E_Protocol {
    TCP,
    UDP,
    Invalid
};

/*****************************************************************************
 * Типы сокетов
 */
enum class E_SocketType {
    Client,
    Server,
    Invalid
};

/*****************************************************************************
 * Виды режимов работы сокета
 */
enum class E_SocketMode
{
    Blocking,
    NonBlocking,
    Invalid
};

/*****************************************************************************
 * Виды режимов работы клиента
 */
enum class E_ClientMode {
    Number,
    Data
};

/*****************************************************************************
 * Виды режимов работы менеджера файлов
 */
enum class E_FileMode {
    Reading,
    Writing
};

/*****************************************************************************
  Functions Prototypes
*****************************************************************************/

/*****************************************************************************
  Variables Definitions
*****************************************************************************/

/*****************************************************************************
  Inline Functions Definitions
*****************************************************************************/

} //namespace network

