/******************************************************************************

  C_Client

  Класс UDP/TCP клиента


  ОПИСАНИЕ

  * Клиент предоставляет возможность устанавливать соединение с TCP/UDP сервером

  * Клиент инициирует соединение с сервером и запрашивает пакеты с данными

    Типы запросов описаны в модуле common_types.h

  * Интерфейс класса включает функции setReqtQuan() и setPeriod(), которые
    настраивают период между запросами и их количество

  * Запуск работы клиента производится с помощью вызова обработчика work()


  ИСПОЛЬЗОВАНИЕ

  1. Для того, чтобы начать использовать клиент, необходимо создать объект класса
     C_Client, передав в качестве параметров конструктору:

     * лог-метку клиента (для идентификации вывода информации от клиента в консоль)
     * в виде строки адрес и порт, к которым будет привязан сокет клиента, разделенные
       пробелом с адресом и портом получателя, которому клиент будет посылать запросы
     * тип протокола: UDP/TCP (см. common_types.h)
     * режим работы используемого сокета: блокирующий/неблокирующий (см. common_types.h)

     C_Client cli( "client", "127.7.7.7:7777 127.0.0.1:8888",
                   Protocol::TCP, BlockingMode::NonBlocking );

  2. После создания объекта клиента необходимо запустить обработчик событий сервера,
     вызвав метод work():

     cli.work();

*******************************************************************************/

#pragma once

#include <QObject>

#include <chrono>
#include <fstream>
#include <atomic>

#include "utils.h"
#include "C_Logger.h"

namespace network {

using namespace services;

/*****************************************************************************
  Macro Definitions
*****************************************************************************/

/*****************************************************************************
  Forward Declarations
*****************************************************************************/

/*****************************************************************************
  Types and Classes Definitions
*****************************************************************************/

/*****************************************************************************
 * Класс UDP/TCP клиента
 */
class C_Client : public QObject
{

    Q_OBJECT

public:

    C_Client( std::string a_logLabel,
              std::string a_authority,
              E_Protocol  a_protoType );

    ~C_Client() = default;

    // Остановить работу клиента
    void stop();

public slots:

    // Главный цикл-обработчик клиента
    void work();

signals:

    // Сигнал для остановки потока клиента
    void finished();

protected:

    /**
     * Обработчики состояний
     */
    // Создание и настройка сокета
    bool setup();
    // Создание сессии с сервером
    bool connect();
    // Отправка данных на сервер
    bool sendPacket( Comand a_comand );
    // Прием данных с сервера
    bool recvPacket();
    // Запись принятого заголовка в файл
    void writeHeader();
    // Запись принятого пакета в файл
    void writePacket();
    // Ожидание между неуспешными итерациями цикла-обработчика, мсек
    void sleep( std::chrono::milliseconds a_sleepTime );

    // Создание и открытие файла для сохранения входящих пакетов
    bool openFile( std::string a_filePath );
    // Разбор принятой от сервера байтовой последовательности
    Comand parseComand() const;
    // Проведение процедуры "handshake" с сервером по UDP протоколу
    void udpConHandler();


protected: // types

    // Состояния, в которых может находится клиент во время работы
    enum class E_States {
        Setup,                                          // Настройка всех служб перед работой
        Connect,                                        // Подключение
        SendPacket,                                     // Обработка запросов на сервер
        RecvPacket,                                     // Обработка ответов сервера
        ParseComand,                                    // Разбор принятого сообщения
        WriteHeader,                                    // Запись заголовка в файл
        WritePacket,                                    // Запись пакета в файл
        Finish                                          // Завершение работы
    };

    // Промежуточные состояния установления соединения с сервером
    enum class E_ConnectionStates {
        EchoReqt,                                       // Отправка запроса на эхо-ответ серверу
        WaitResp,                                       // Ожидание эхо-ответа от сервера
        VerifyStatus,                                   // Проверка статуса соединения с сервером
        Connected                                       // Соединение с сервером установлено
    };

    // Коды возврата функции setup()
    enum E_SetupRetVal {
        enSockAlreadyCreated = -1,                      // Ошибка, сокет был создан ранее
        enSockCreateError    = -2,                      // Ошибка при создании сокета
        enSockOpenError      = -3,                      // Ошибка при открытии сокета
        enSockSetupError     = -4,                      // Ошибка при конфигурировании сокета
    };

protected slots:

    // Завершение работы клиента
    void close();

protected:

    std::atomic<bool>           isRunning;              // Атомарный флаг работы главного цикла-обработчика событий клиента
    std::vector<char>           m_buffer;               // Буфер обмена для приема отправки
    std::string                 m_name;                 // Лог-метка клиента
    std::string                 m_authority;            // Адреса и порты клиента и сервера в виде строки
    E_Protocol                  m_protoType;            // Протокол обмена
    std::shared_ptr<I_Socket>   m_handle;               // Файл дескриптор клиента
    std::ofstream               m_file;                 // Хендлер на файл с принятыми данными
    unsigned long long          m_counter = 0;          // Счетчик принятых пакетов

protected: // static

    static const size_t        s_bufSize;               // Максимальный размер буфера приема-передачи
    static const unsigned char s_approveCount;          // Количество подтверждений от сервера для установления соединения
};

/*****************************************************************************
  Functions Prototypes
*****************************************************************************/

/*****************************************************************************
  Variables Definitions
*****************************************************************************/

/*****************************************************************************
  Inline Functions Definitions
*****************************************************************************/

} // namespace network
